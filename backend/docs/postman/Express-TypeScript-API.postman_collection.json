{
  "info": {
    "name": "Express TypeScript API - Updated",
    "description": "Updated API collection for Express TypeScript Starter with ProfileController",
    "version": "1.1.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{baseUrl}}",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', () => {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has user data', () => {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('user');",
                  "    pm.expect(jsonData.data.user).to.have.property('_id');",
                  "    pm.expect(jsonData.data.user).to.have.property('email');",
                  "    ",
                  "    // Store user ID for other requests",
                  "    pm.collectionVariables.set('userId', jsonData.data.user._id);",
                  "});",
                  "",
                  "pm.test('Access token is set', () => {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('tokens');",
                  "    pm.expect(jsonData.data.tokens).to.have.property('accessToken');",
                  "    ",
                  "    // Store tokens for other requests",
                  "    pm.collectionVariables.set('accessToken', jsonData.data.tokens.accessToken);",
                  "    pm.collectionVariables.set('refreshToken', jsonData.data.tokens.refreshToken);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', () => {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"testuser@example.com\",\n  \"password\": \"Password123!\",\n  \"username\": \"testuser\",\n  \"profile\": {\n    \"firstName\": \"Test\",\n    \"lastName\": \"User\",\n    \"bio\": \"Test user bio\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          }
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Login successful', () => {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('user');",
                  "    pm.expect(jsonData.data).to.have.property('tokens');",
                  "    ",
                  "    // Store tokens and user ID for other requests",
                  "    pm.collectionVariables.set('accessToken', jsonData.data.tokens.accessToken);",
                  "    pm.collectionVariables.set('refreshToken', jsonData.data.tokens.refreshToken);",
                  "    pm.collectionVariables.set('userId', jsonData.data.user._id);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', () => {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"testuser@example.com\",\n  \"password\": \"Password123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          }
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('New tokens received', () => {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('tokens');",
                  "    ",
                  "    // Update stored tokens",
                  "    pm.collectionVariables.set('accessToken', jsonData.data.tokens.accessToken);",
                  "    pm.collectionVariables.set('refreshToken', jsonData.data.tokens.refreshToken);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "refresh"]
            }
          }
        },
        {
          "name": "Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Logout successful', () => {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    ",
                  "    // Clear stored tokens",
                  "    pm.collectionVariables.set('accessToken', '');",
                  "    pm.collectionVariables.set('refreshToken', '');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "logout"]
            }
          }
        }
      ]
    },
    {
      "name": "Profile Management",
      "item": [
        {
          "name": "Get User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has profile data', () => {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('profile');",
                  "    pm.expect(jsonData.data.profile).to.have.property('_id');",
                  "    pm.expect(jsonData.data.profile).to.have.property('userId');",
                  "});",
                  "",
                  "pm.test('Response time is less than 1000ms', () => {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "profile"]
            }
          }
        },
        {
          "name": "Update Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile updated successfully', () => {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('profile');",
                  "    pm.expect(jsonData.data.profile).to.have.property('firstName', 'Updated');",
                  "    pm.expect(jsonData.data.profile).to.have.property('lastName', 'Name');",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', () => {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Updated\",\n  \"lastName\": \"Name\",\n  \"bio\": \"Updated bio information\",\n  \"dateOfBirth\": \"1990-01-01\",\n  \"location\": {\n    \"country\": \"France\",\n    \"city\": \"Paris\"\n  },\n  \"socialLinks\": {\n    \"website\": \"https://example.com\",\n    \"twitter\": \"@example\",\n    \"linkedin\": \"linkedin.com/in/example\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "profile"]
            }
          }
        },
        {
          "name": "Upload Avatar",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Avatar uploaded successfully', () => {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('avatar');",
                  "    pm.expect(jsonData.data.avatar).to.have.property('url');",
                  "    pm.expect(jsonData.data.avatar).to.have.property('filename');",
                  "});",
                  "",
                  "pm.test('Profile updated with avatar', () => {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('profile');",
                  "    pm.expect(jsonData.data.profile).to.have.property('avatar');",
                  "});",
                  "",
                  "pm.test('Response time is less than 5000ms', () => {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "avatar",
                  "description": "Avatar image file (JPG, PNG, WEBP - max 5MB)",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/profile/avatar",
              "host": ["{{baseUrl}}"],
              "path": ["api", "profile", "avatar"]
            }
          }
        },
        {
          "name": "Remove Avatar",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Avatar removed successfully', () => {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('profile');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/profile/avatar",
              "host": ["{{baseUrl}}"],
              "path": ["api", "profile", "avatar"]
            }
          }
        },
        {
          "name": "Get Avatar Config",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Config data received', () => {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('maxFileSize');",
                  "    pm.expect(jsonData.data).to.have.property('allowedFormats');",
                  "    pm.expect(jsonData.data).to.have.property('maxFileSizeMB');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/profile/avatar/config",
              "host": ["{{baseUrl}}"],
              "path": ["api", "profile", "avatar", "config"]
            }
          }
        }
      ]
    },
    {
      "name": "User Management (Admin)",
      "item": [
        {
          "name": "Get All Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Users list received', () => {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('users');",
                  "    pm.expect(jsonData.data.users).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Pagination info present', () => {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('pagination');",
                  "    pm.expect(jsonData.data.pagination).to.have.property('page');",
                  "    pm.expect(jsonData.data.pagination).to.have.property('limit');",
                  "    pm.expect(jsonData.data.pagination).to.have.property('total');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          }
        },
        {
          "name": "Get User by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('User data received', () => {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('user');",
                  "    pm.expect(jsonData.data.user).to.have.property('_id');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userId}}"]
            }
          }
        },
        {
          "name": "Update User by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('User updated successfully', () => {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('user');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"updateduser\",\n  \"email\": \"updated@example.com\",\n  \"role\": \"USER\",\n  \"isActive\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userId}}"]
            }
          }
        },
        {
          "name": "Delete User by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('User deleted successfully', () => {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Health & Info",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Health status is OK', () => {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('status', 'OK');",
                  "    pm.expect(jsonData.data).to.have.property('environment');",
                  "    pm.expect(jsonData.data).to.have.property('uptime');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "health"]
            }
          }
        },
        {
          "name": "API Info",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('API info received', () => {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('service');",
                  "    pm.expect(jsonData.data).to.have.property('version');",
                  "    pm.expect(jsonData.data).to.have.property('endpoints');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api",
              "host": ["{{baseUrl}}"],
              "path": ["api"]
            }
          }
        }
      ]
    }
  ]
}
